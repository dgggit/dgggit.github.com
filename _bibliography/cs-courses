@listing{dbms,
  title={15-445 Database Systems},
  year={CMU, Fall 2020 (By Prof. Andy Pavlo)},
  description={This course is on the design and implementation of database management systems. Topics include data models (relational, document, key/value), storage models (n-ary, decomposition), query languages (SQL, stored procedures), storage architectures (heaps, log-structured), indexing (order preserving trees, hash tables), transaction processing (ACID, concurrency control), recovery (logging, checkpoints), query processing (joins, sorting, aggregation, optimization), and parallel architectures (multi-core, distributed). Case studies on open-source and commercial database systems are used to illustrate these techniques and trade-offs. The course is appropriate for students that are prepared to flex their strong systems programming skills. (videos: Fall 2019)},

  status={dbms},
  website={https://15445.courses.cs.cmu.edu/fall2020/},
  materials={https://15445.courses.cs.cmu.edu/fall2020/schedule.html},
  videos={https://www.youtube.com/watch?v=oeYBdghaIjc&list=PLSE8ODhjZXjbohkNBWQs_otTrBTrjyohi}
}

@listing{advdbms,
  title={15-721 Advanced Database Systems},
  year={CMU, Spring 2020 (By Prof. Andy Pavlo)},
  description={This course is a comprehensive study of the internals of modern database management systems. It will cover the core concepts and fundamentals of the components that are used in both high-performance transaction processing systems (OLTP) and large-scale analytical systems (OLAP). The class will stress both efficiency and correctness of the implementation of these ideas. All class projects will be in the context of a real in-memory, multi-core database system. The course is appropriate for graduate students in software systems and for advanced undergraduates with dirty systems programming skills.},

  status={dbms},
  website={https://15721.courses.cs.cmu.edu/spring2020},
  materials={https://15721.courses.cs.cmu.edu/spring2020/schedule.html},
  videos={https://www.youtube.com/watch?v=SdW5RKUboKc&list=PLSE8ODhjZXjasmrEd2_Yi1deeE360zv5O}
}



@listing{sgt,
  title={CPSC662 Spectral Graph Theory},
  year={Yale, Fall 2018},
  description={CPSC 662/AMTH 561, is a graduate course on Spectral Graph Theory and related topics. It is taught in the style of a math class, and will cover a bunch of theorems, a few algorithms, and many open problems. I have chosen to only present material that I consider beautiful. My other goals are to present material that is useful and to introduce fundamental concepts. You could think of this as a course in "Advanced Linear Algebra with examples from Graph Theory." Most lectures will cover some essential element of Linear Algebra or Spectral Theory. You could also think of this as a course in "how to talk with Dan", because I find that almost every research question I address somehow relates back to material covered in this course.},

  status={math},
  website={http://www.cs.yale.edu/homes/spielman/561/561schedule.html},
}

@listing{pgm,
  title={15-895N Spectral Graph Theory with Applications to ML},
  year={CMU, Spring 2020},
  description={This class will cover material from three areas: Spectral Graph Theory, Numerical Linear Algebra, and the application to problem in CS. The central issue in spectral graph theory is understanding, estimating, and finding eigenvectors and eigenvalues of graphs. The study of random walks on a graph was one of the first users of spectral graph theory. Answering such questions as: How many times should you shuffle a deck of cards to insure that the deck is "well shuffled"? More recent application include Google's page rank algorithm which performs a random walk on the hyperlink graph of the Internet. It has also been applied to the problem of finding these eigenvectors as well as solving related linear systems.},

  status={math},
  website={http://www.cs.cmu.edu/afs/cs/academic/class/15859n-s20/index.html},
}


@listing{pgm,
  title={10-708 Probablistic Graph Models},
  year={CMU, Spring 2014},
  description={Many of the problems in artificial intelligence, statistics, computer systems, computer vision, natural language processing, and computational biology, among many other fields, can be viewed as the search for a coherent global conclusion from local information. The probabilistic graphical models framework provides an unified view for this wide range of problems, enabling efficient inference, decision-making and learning in problems with a very large number of attributes and huge datasets. This graduate-level course will provide you with a strong foundation for both applying graphical models to complex problems and for addressing core research topics in graphical models.
},

  status={aidl},
  website={http://www.cs.cmu.edu/~epxing/Class/10708-14/index.html},
}


@listing{mlg,
  title={CS224w Machine Learning with Graphs},
  year={Stanford, Winter 2021},
  description={Complex data can be represented as a graph of relationships between objects. Such networks are a fundamental tool for modeling social, technological, and biological systems. This course focuses on the computational, algorithmic, and modeling challenges specific to the analysis of massive graphs. By means of studying the underlying graph structure and its features, students are introduced to machine learning techniques and data mining tools apt to reveal insights on a variety of networks.
},

  status={aidl},
  website={http://web.stanford.edu/class/cs224w/},
}



@listing{mmdm,
  title={CS246 Mining Massive Data Sets},
  year={Stanford, Winter 2020},
  description={The course will discuss data mining and machine learning algorithms for analyzing very large amounts of data. The emphasis will be on MapReduce and Spark as tools for creating parallel algorithms that can process very large amounts of data.
Topics include: Frequent itemsets and Association rules, Near Neighbor Search in High Dimensional Data, Locality Sensitive Hashing (LSH), Dimensionality reduction, Recommendation Systems, Clustering, Link Analysis, Large-scale Supervised Machine Learning, Data streams, Mining the Web for Structured Data, Web Advertising.},

  status={bddm},
  website={http://web.stanford.edu/class/cs246/},
  videos={https://www.youtube.com/channel/UC_Oao2FYkLAUlUVkBfze4jg/videos}
}

@listing{mlg,
  title={CS375/Psych249 Large-Scale Neural Network Models for Neuroscience},
  year={Stanford, Autumn 2018},
  description={This class will serve as an introduction to designing, building, and training large-scale neural networks for modeling brain and behavioral data, including: deep convolutional neural network models of sensory systems (vision and audition); recurrent neural networks for dynamics, memory and attention; integration of variational and generative methods for cognitive modeling; and methods and metrics for comparing such models to real-world neural data. Attention will be given both to established methods as well as cutting-edge techniques. Students will investigate conceptual bases for deep neural network models, while learning to implement and train large-scale models in Tensorflow using GPUs.},

  status={cmpbio},
  website={http://cs375.stanford.edu/},
}

@listing{atcs,
  title={CS262a Advanced Topics in Computer Systems},
  year={UCB, Fall 2019},
  description={Graduate survey of systems for managing computation and information, covering a breadth of topics: early systems; volatile memory management, including virtual memory and buffer management; persistent memory systems, including both file systems and transactional storage managers; storage metadata, physical vs. logical naming, schemas, process scheduling, threading and concurrency control; system support for networking, including remote procedure calls, transactional RPC, TCP, and active messages; security infrastructure; extensible systems and APIs; performance analysis and engineering of large software systems. Homework assignments, exam, and term paper or project required.},

  status={pdcc},
  website={https://people.eecs.berkeley.edu/~kubitron/cs262/index.html},
  materials={https://people.eecs.berkeley.edu/~kubitron/cs262/index.html}
}

@listing{atcs,
  title={AM207 Stochastic Methods for Data Analysis, Inference and Optimization},
  year={Harvard, Fall 2016},
  description={This class is all about using stochastic methods to solve data inference and optimization problems. Over the course of a semester you will learn how to use Markov Chain Monte Carlo methods for a variety of applications, from solving integration problems to sampling from complicated posteriors. We will also talk about stochastic optimization methods like simulated annealing and stochastic gradient decent.},

  status={scicmp},
  website={http://am207.github.io/2016/pages/syllabus.html},
  videos={https://matterhorn.dce.harvard.edu/engage/ui/index.html#/2016/02/24104}
}

@listing{atcs,
  title={6.826 Principles of Computer Systems},
  year={Harvard, Fall 2020 (by Prof. Nickolai Zeldovich)},
  description={computer systems from a verification perspective. Isolation, locking, logging, consistency, Paxos, non-interference, .. Key ideas you have seen in 6.033, 6.828, 6.824, ... 6.826 will try to discuss them in a principled manner. Particular focus on specification and proofs. What does it mean for a system to be correct? What exact properties does it provide? Is the implementation correct, or does it have bugs?},

  status={pdcc},
  website={https://6826.csail.mit.edu/2020/},
  videos={https://www.youtube.com/watch?v=To6lsY24A8o&list=PLA6Ht2dJt3SITo6PYTyzr9832epkyFD48&index=1}
}

@listing{css,
  title={6.858 Computer Systems Security},
  year={Harvard, Spring 2020 (by Prof. Nickolai Zeldovich)},
  description={Design and implementation of secure computer systems. Lectures cover threat models, attacks that compromise security, and techniques for achieving security, based on recent research papers. Topics include operating system (OS) security, capabilities, information flow control, language security, network protocols, hardware security, and security in web applications. Assignments include labs that involve implementing and compromising a secure web server and web application, and a group final project. Students can use 6.858 to fulfill the engineering concentration requirements for Computer Systems.},

  status={sec},
  website={https://css.csail.mit.edu/6.858/2020/schedule.html},
  videos={https://www.youtube.com/watch?v=x6QsaB2aSmU&list=PLA6Ht2dJt3SKN3z4S6nOvuJtesDXbly7S}
}

@listing{bda,
  title={E6893 Big Data Analysis},
  year={Columbia, Fall 2020 (by Prof. Ching-Yung Lin)},
  description={Students will gain knowledge on analyzing Big Data. It serves as an introductory course for graduate students who are expecting to face Big Data storage, processing, analysis, visualization, and application issues on both workplaces and research environments. Gain knowledge on this fast-changing technological direction. Big Data Analytics is probably the fastest evolving issue in the IT world now. New tools and algorithms are being created and adopted swiftly. Get insight on what tools, algorithms, and platforms to use on which types of real world use cases.},

  status={bddm},
  website={https://www.ee.columbia.edu/~cylin/course/bigdata/},
  videos={}
}

@listing{cvxopt,
  title={CS334a/b Convex Optimization I/II},
  year={Stanford (by Prof. Stephen Boyd)},
  description={Concentrates on recognizing and solving convex optimization problems that arise in applications. Convex sets, functions, and optimization problems. Basics of convex analysis. Least-squares, linear and quadratic programs, semidefinite programming, minimax, extremal volume, and other problems. Optimality conditions, duality theory, theorems of alternative, and applications. Interior-point methods. Applications to signal processing, statistics and machine learning, control and mechanical engineering, digital and analog circuit design, and finance. (Videos : 2008)},

  status={math},
  website={https://web.stanford.edu/class/ee364a/courseinfo.html},
  videos={https://www.youtube.com/watch?v=McLq1hEq3UY&list=PL3940DD956CDF0622&index=1}
}

@listing{abt,
  title={CS368 Algorithmic Techniques for Big Data},
  year={Stanford, Spring 2020},
  description={Designing algorithms for efficient processing of large data sets poses unique challenges. This course will discuss algorithmic paradigms that have been developed to efficiently process data sets that are much larger than available memory. We will cover streaming algorithms and sketching methods that produce compact data structures, dimension reduction methods that preserve geometric structure, efficient algorithms for numerical linear algebra, graph sparsification methods, as well as impossibility results for these techniques.},

  status={algo},
  website={http://web.stanford.edu/class/cs368/},
  videos={}
}

@listing{aabt,
  title={CS229r Algorithms for Big Data},
  year={Harvard, Fall 2015},
  description={Big data is data so large that it does not fit in the main memory of a single machine, and the need to process big data by efficient algorithms arises in Internet search, network traffic monitoring, machine learning, scientific computing, signal processing, and several other areas. This course will cover mathematically rigorous models for developing such algorithms, as well as some provable limitations of algorithms operating in those models. },

  status={algo},
  website={http://people.seas.harvard.edu/~minilek/cs229r/fall15/index.html},
  videos={https://www.youtube.com/watch?v=s9xSfIw83tk&list=PL2SOU6wwxB0v1kQTpqpuu5kEJo2i-iUyf}
}


@listing{tinl,
  title={CS6810 Theory of Computing},
  year={Cornell, Spring 2016},
  description={This graduate course gives a broad introduction to complexity theory, including classical results and recent developments. Complexity theory aims to understand the power of efficient computation (when computational resources like time and space are limited). },

  status={algo},
  website={https://complexity16.dsteurer.org/},
  videos={}
}

@listing{aa,
  title={6.854J Advanced Algorithms},
  year={MIT, Fall 2020},
  description={The need for efficient algorithms arises in nearly every area of computer science. But the type of problem to be solved, the notion of what algorithms are "efficient," and even the model of computation can vary widely from area to area. This course is designed to be  capstone course in algorithms that surveys some of the most powerful algorithmic techniques and key computational models. It aims to bring the students up to the level where they can read and understand research papers. We will cover a broad selection of topics including amortization, hashing, dimensionality reduction, bit scaling, network flow, linear programming, and approximation algorithms. Domains that we will explore include data structures; algorithmic graph theory; streaming algorithms; online algorithms; parallel algorithms; computational geometry; external memory/cache oblivious algorithms; and continuous optimization.},

  status={algo},
  website={https://courses.csail.mit.edu/6.854/20/},
  videos={https://www.youtube.com/watch?v=QnPl_Y6EqMo&list=PLiizAEBnotSzGvn-KqAEQ2xQVDXYw5Rdh}
}

@listing{aa,
  title={6.854 Advanced Algorithms},
  year={MIT, Spring 2016},
  description={The design and analysis of algorithms is one of the central pillars of computer science. This course is designed to be a capstone course in algorithms, and will expose students to some of the most powerful and modern modes of algorithmic thinking ---- as well as how to apply them. We will cover a wide variety of topics including hashing, dimension reduction, max flow, linear programming, semidefinite programming, approximation algorithms, multiplicative weights, gradient descent and compressed sensing, and bring students up to the level where they can read and understand research papers.
},

  status={algo},
  website={http://people.csail.mit.edu/moitra/854.html},
  videos={https://www.youtube.com/watch?v=hM547xRIdzc&list=PL6ogFv-ieghdoGKGg2Bik3Gl1glBTEu8c}
}

@listing{aa,
  title={6.851 Advanced Data Structures},
  year={MIT, Spring 2021},
  description={Data structures play a central role in modern computer science. You interact with data structures even more often than with algorithms (think Google, your mail server, and even your network routers). In addition, data structures are essential building blocks in obtaining efficient algorithms. This course covers major results and current research directions in data structures.(Videos : 2012)},
},

  status={algo},
  website={https://courses.csail.mit.edu/6.851/spring21/},
  materials={https://courses.csail.mit.edu/6.851/spring21/lectures/},
  videos={https://courses.csail.mit.edu/6.851/spring21/lectures/L01.html}
}


@listing{ds,
  title={15-440 Distributed Systems},
  year={MIT, Spring 2021},
  description={Introduction to distributed systems with a focus on teaching concepts via projects implemented in the Go programming language.},

  status={pdcc},
  website={https://www.composablesystems.org/15-440/fa2020/},
  materials={https://www.composablesystems.org/15-440/fa2020/schedule/},
  videos={}
}

@listing{ds,
  title={15-418 Parallel Computer Architecture and Programming},
  year={CMU, Spring 2021},
  description={From smart phones, to multi-core CPUs and GPUs, to the world's largest supercomputers, parallel processing is ubiquitous in modern computing. The goal of this course is to provide a deep understanding of the fundamental principles and engineering trade-offs involved in designing modern parallel computing systems as well as to teach parallel programming techniques necessary to effectively utilize these machines. Because writing good parallel programs requires an understanding of key machine performance characteristics, this course will cover hardware design and how that affects software design. (Videos : 2015)},

  status={pdcc},
  website={http://www.cs.cmu.edu/~418/index.html},
  videos={https://scs.hosted.panopto.com/Panopto/Pages/Sessions/List.aspx#folderID=%22a5862643-2416-49ef-b46b-13465d1b6df0%22}
}

@listing{ds,
  title={6.824 Distributed Systems},
  year={MIT, Spring 2021},
  description={6.824 is a core 12-unit graduate subject with lectures, readings, programming labs, an optional project, a mid-term exam, and a final exam. It will present abstractions and implementation techniques for engineering distributed systems. Major topics include fault tolerance, replication, and consistency. Much of the class consists of studying and discussing case studies of distributed systems. (Video : 2020)},

  status={pdcc},
  website={https://pdos.csail.mit.edu/6.824/index.html},
  videos={https://www.youtube.com/watch?v=cQP8WApzIQQ&list=PLrw6a1wE39_tb2fErI4-WkMbsvGQk9_UB}
}

